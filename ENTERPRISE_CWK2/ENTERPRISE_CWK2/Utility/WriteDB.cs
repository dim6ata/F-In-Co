using ENTERPRISE_CWK2.Models;
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ENTERPRISE_CWK2.Utility
{
    /// <summary>
    /// Class that handles all inserting into database when new elements are created.
    /// </summary>
    public class WriteDB
    {
        private SystemDB systemDB;
        private User dbUser;

        public WriteDB(User currentUser)
        {
            systemDB = SystemDB.Instance;
            dbUser = currentUser;
        }

        /// <summary>
        /// Inserts a new account into database
        /// </summary>
        /// <param name="account"></param>
        public void insertAccount(Account account)
        {
            SQLiteCommand command;
            SQLiteConnection conn = systemDB.connect();
            string insertAccountSQL = "INSERT INTO Account(accountName, accountNum, " +
            "accountSortCode, accountUserID) VALUES(@aName, @aNum, @aSCode, @aUID);";
            string insertAccountTypeSQL = "INSERT INTO AccountType(accountID, typeID) VALUES(@aID, @tID);";

            try
            {
                //first insert of account:
                command = conn.CreateCommand();
                command.CommandText = insertAccountSQL;
                command.Parameters.AddWithValue("aName", account.AccName);
                command.Parameters.AddWithValue("aNum", account.AccNum);
                command.Parameters.AddWithValue("aSCode", account.AccSortCode);
                command.Parameters.AddWithValue("aUID", dbUser.UserID);
                command.ExecuteNonQuery();

                account.AccID = Convert.ToInt32(conn.LastInsertRowId); //retrieve the autogenerated id and assign to account.

                //second insert into AccountType, using the previously autogenerated AccountID
                command.Parameters.Clear();
                command.CommandText = insertAccountTypeSQL;
                command.Parameters.AddWithValue("aID", account.AccID);
                command.Parameters.AddWithValue("tID", account.AccType.accTypeID);
                command.ExecuteNonQuery();

                dbUser.UserAccountsList.Add(account);
                dbUser.UserAccountsDict.Add(account.AccID, account);
            }
            catch (SQLiteException e)
            {
                Debug.WriteLine("Error in add account " + e);
            }
            finally
            {
                systemDB.CloseConnection(conn);
            }
        }



        /// <summary>
        /// Inserts new transaction details in data base
        /// </summary>
        /// <param name="trans"></param>
        public void insertTransaction(Transaction trans)
        {
            SQLiteCommand command;
            SQLiteConnection conn = systemDB.connect();
            string insertTransactionSQL = "INSERT INTO TransactionDetails(transactionAmount, transactionDate, " +
                "transactionReference, accountID, contactID, serviceID, isIncome) VALUES(@tAmount, @tDate, @tRef, @aID, @cID, @sID, @isIncome);";
            try
            {
                command = conn.CreateCommand();
                command.CommandText = insertTransactionSQL;
                command.Parameters.AddWithValue("tAmount", trans.TransAmount);
                command.Parameters.AddWithValue("tDate", trans.TransDateString);//passing the string value as it is in converted format
                command.Parameters.AddWithValue("tRef", trans.TransReference);
                command.Parameters.AddWithValue("aID", trans.TransAccID);
                command.Parameters.AddWithValue("cID", trans.TransContact.ContactID);
                command.Parameters.AddWithValue("sID", trans.TransServiceID);
                command.Parameters.AddWithValue("isIncome", Convert.ToInt32(trans.getType()));
                command.ExecuteNonQuery();

                trans.TransID = Convert.ToInt32(conn.LastInsertRowId);//assigns autogenerated id to Transaction class TransID

            }
            catch (SQLiteException e)
            {
                Debug.WriteLine("The SQL Error is " + e);
            }
            finally
            {
                systemDB.CloseConnection(conn);
            }
        }


        /// <summary>
        /// Updates transaction details in data base
        /// </summary>
        /// <param name="trans"></param>
        public void insertContact(Contact contact)
        {
            SQLiteCommand command;
            SQLiteConnection conn = systemDB.connect();
            string insertContactSQL = "INSERT INTO Contact(contactName, contactEmail, " +
                "contactPhone, contactAccountNum, contactSortCode) VALUES(@cName, @cEmail, @cPhone, @cAccNum, @cSCode);";
            string insertUserContactSQL = "INSERT INTO UserContact(contactID, userID) VALUES(@cID, @uID)";
            try
            {
                command = conn.CreateCommand();
                command.CommandText = insertContactSQL;
                command.Parameters.AddWithValue("cName", contact.ContactName);
                command.Parameters.AddWithValue("cEmail", contact.ContactEmail);//passing the string value as it is in converted format
                command.Parameters.AddWithValue("cPhone", contact.ContactPhone);
                command.Parameters.AddWithValue("cAccNum", contact.ContactAccNum);
                command.Parameters.AddWithValue("cSCode", contact.ContactSortCode);
                command.ExecuteNonQuery();

                contact.ContactID = Convert.ToInt32(conn.LastInsertRowId);//assigns autogenerated id to Contact.

                dbUser.UserContactsList.Add(contact.ContactID, contact);
                dbUser.UserSortableContactList.Add(contact);

                command.Parameters.Clear();
                command.CommandText = insertUserContactSQL;
                command.Parameters.AddWithValue("cID", contact.ContactID);
                command.Parameters.AddWithValue("uID", dbUser.UserID);
                command.ExecuteNonQuery();
            }
            catch (SQLiteException e)
            {
                Debug.WriteLine("The SQL Error is " + e);
            }
            finally
            {
                systemDB.CloseConnection(conn);
            }
        }

    }
}
