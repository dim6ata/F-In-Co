<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ENTERPRISE_CWK2"
             xmlns:custom="clr-namespace:ENTERPRISE_CWK2.Utility"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Class="ENTERPRISE_CWK2.App"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <!--Create style rules-->

        <!--
        **********************************************************************************
                                        COLOURS
        **********************************************************************************      
        -->
        <!--Creates page colours-->
        <SolidColorBrush x:Key="VioletColor">#6221A3</SolidColorBrush>
        <SolidColorBrush x:Key="YellowColor">#E0FF8A</SolidColorBrush>
        <SolidColorBrush x:Key="GreenColor">#4FE8A1</SolidColorBrush>
        <SolidColorBrush x:Key="WhiteColor">#FFFFFF</SolidColorBrush>
        <SolidColorBrush x:Key="HoverOverColor">#bde7fe</SolidColorBrush>
        <!--Style for user control windows-->
        <Style x:Key="userControlStyle" TargetType ="{x:Type UserControl}" >

            <Setter Property="Background" Value="{StaticResource VioletColor}"/>

        </Style>



        <!--
        **********************************************************************************
                                        WINDOWS
        **********************************************************************************      
        -->

        <!--window style-->
        <Style x:Key="windowStyle" TargetType="{x:Type Window}">

            <Setter Property="FontFamily" Value="Times New Roman"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
        </Style>


        <!--
        **********************************************************************************
                                        LABELS
        **********************************************************************************      
        -->
        <!--Label style violet-->
        <Style TargetType="{x:Type Label}">
            <Setter Property="FontFamily" Value="Times New Roman"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
        </Style>

        <!--Label style for different view sections-->
        <Style x:Key="largeLabelStyle"  TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">

            <Setter Property="Foreground" Value="{StaticResource WhiteColor}"/>
            <Setter Property="FontSize" Value="30"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <!--<Setter Property="Margin" Value="10,0,0,0"/>-->

        </Style>

        <!--Label style for different view sections-->
        <Style x:Key="subSectionLabelStyle"  TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">

            <Setter Property="Foreground" Value="{StaticResource WhiteColor}"/>
            <Setter Property="FontSize" Value="15"/>
            <Setter Property="VerticalAlignment" Value="Center"/>

        </Style>

        <!--FORM LABEL STYLE-->

        <Style x:Key="formLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">

            <Setter Property="Background" Value="{StaticResource GreenColor}"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="30"/>
            <Setter Property="Margin" Value="0,10,0,0"/>
            <Setter Property="Padding" Value="100,0,100,0"/>

        </Style>
        
        
        

        <!--
        **********************************************************************************
                                        TEXT BLOCK
        **********************************************************************************      
        -->

        <Style TargetType="{x:Type TextBlock}">

            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>

        </Style>

        <Style  x:Key="greenTextBlockStyle"  TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">

            <Setter Property="FontSize" Value="25"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Foreground" Value="{StaticResource GreenColor}"/>

        </Style>

        <Style  x:Key="violetTextBlockStyle"  TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">

            <Setter Property="FontSize" Value="25"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>

        </Style>



        <!--
        **********************************************************************************
                                        BORDERS
        **********************************************************************************      
        -->

        <Style x:Key="accountButtonBorderStyle" TargetType="{x:Type Border}">

            <Setter Property="BorderBrush" Value="{StaticResource VioletColor}"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="Background" Value="{StaticResource WhiteColor}"/>


        </Style>

        <!--
        **********************************************************************************
                                        BUTTONS
        **********************************************************************************      
        -->

        <!--Generic Button Style - applied to all buttons-->
        <Style TargetType="{x:Type Button}">

            <!--Creating rounded corners of buttons-->
            <Style.Resources>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="CornerRadius" Value="5"/>
                </Style>
            </Style.Resources>


            <Setter Property="OverridesDefaultStyle" Value="True"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="customNewDefaultButtonBorder" Background="{TemplateBinding Background}"
                                Padding="5,10,5,10" BorderBrush="{StaticResource VioletColor}" 
                                BorderThickness="1">
                            <ContentPresenter x:Name="MyContentPresenter" 
                                      Content="{TemplateBinding Content}"
                                      HorizontalAlignment="Center" 
                                      VerticalAlignment="Center"/>
                        </Border>

                    </ControlTemplate>

                </Setter.Value>

            </Setter>

            <Setter Property="Margin" Value="5"/>
            <Setter Property="FontFamily" Value="Times New Roman"/>

            <!--Triggers of Generic Button Style-->

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource HoverOverColor}"/>
                    <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>

                </Trigger>
            </Style.Triggers>


        </Style>


        <!--Selected Navigation Button Style-->
        <Style x:Key="SelectedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">

            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="Background" Value="{DynamicResource YellowColor}"/>
            <Setter Property="Foreground" Value="{DynamicResource VioletColor}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource VioletColor}"/>

        </Style>
        <!--Primary Navigation Button Style-->
        <Style x:Key="PrimaryButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">

            <Setter Property="Background" Value="{DynamicResource VioletColor}"/>
            <Setter Property="Foreground" Value="{DynamicResource YellowColor}"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <!--<Setter Property="Style" Value="{DynamicResource SelectedButton}"/>-->
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="Background" Value="{DynamicResource YellowColor}"/>
                    <Setter Property="Foreground" Value="{DynamicResource VioletColor}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource VioletColor}"/>

                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="BorderBrush" Value="{StaticResource VioletColor}"/>
                </Trigger>
            </Style.Triggers>

        </Style>

        <!-- F-Logo button style -->
        <Style x:Key="LogoButton" TargetType="{x:Type Button}" >
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Height" Value="150"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="logoContentPresenter" 
                                      Content="{TemplateBinding Content}"
                                      HorizontalAlignment="Center" 
                                      VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource HoverOverColor}"/>
                </Trigger>
            </Style.Triggers>

        </Style>

        <!--In-page small button style-->
        <Style x:Key="appButton" TargetType="{x:Type Button}">

            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="Width" Value="50"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Margin" Value="5"/>
        </Style>

        <!--
        **********************************************************************************
        -->

        <Style x:Key="deleteButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource appButton}">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Image VerticalAlignment="Center" 
                        Source="/ImageResources/bin_sq.png" Margin="0,0,8,0"/>
                            <ContentControl Content="{Binding}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
        **********************************************************************************
        -->

        <Style x:Key="addButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource appButton}">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Image VerticalAlignment="Center" 
                        Source="/ImageResources/add_btn_vio.png" Margin="0,0,8,0"/>
                            <ContentControl Content="{Binding}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
        **********************************************************************************
        -->

        <Style x:Key="editButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource appButton}">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Image VerticalAlignment="Center" 
                        Source="/ImageResources/pencil_vio_3.png" Margin="0,0,8,0"/>
                            <ContentControl Content="{Binding}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
        **********************************************************************************
        -->

        <Style x:Key="viewButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource appButton}">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Image VerticalAlignment="Center" 
                        Source="/ImageResources/eye_sq.png" Margin="0,0,8,0"/>
                            <ContentControl Content="{Binding}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
        **********************************************************************************
        -->

        <Style x:Key="searchButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource appButton}">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Image x:Name="btnImage" VerticalAlignment="Center" 
                        Source="/ImageResources/mgnf_glass_vio.png" Margin="0,0,8,0"/>
                            <ContentControl Content="{Binding}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
        **********************************************************************************
        -->

        <Style x:Key="confirmButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource appButton}">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Image VerticalAlignment="Center" 
                        Source="/ImageResources/check_sq.png" Margin="0,0,8,0"/>
                            <ContentControl Content="{Binding}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
        **********************************************************************************
        -->

        <Style x:Key="backButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource appButton}">
            <!--<Setter Property="Height" Value="100"/>-->
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Image VerticalAlignment="Center" 
                        Source="/ImageResources/back_btn_vio.png" Margin="0,0,8,0"/>
                            <!--back_sq.png-->
                            <ContentControl Content="{Binding}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
        **********************************************************************************
        -->
        <!-- Custom style accounts details button -->
        <Style x:Key="accountCustomBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">

            <Setter Property="IsEnabled" Value="True"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Padding" Value="0"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="True">
                    <Setter Property="Background" Value="{DynamicResource GreenColor}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{DynamicResource YellowColor}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource HoverOverColor}"/>
                </Trigger>

            </Style.Triggers>

        </Style>


        <!--Account Container Button -->

        <Style x:Name="customButtonStyle" TargetType="{x:Type custom:AccountCustomCtrl}">

            <Setter Property="Template">

                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type custom:AccountCustomCtrl}">
                        <Button x:Name="customAccountButton" Style="{StaticResource accountCustomBtnStyle}">
                            <DockPanel Width="200" VerticalAlignment="Top">
                                <Grid DockPanel.Dock="Top">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <!--Green label on top-->
                                    <Label x:Name="accTypeLabel" FontSize="20" HorizontalContentAlignment="Center" Grid.Row="0" Content="Joint Account" />


                                    <Border Style="{StaticResource accountButtonBorderStyle}" Grid.Row="1" Grid.RowSpan="2">
                                        <Viewbox Height="70">
                                            <StackPanel  Width="300">
                                                <Viewbox>
                                                    <StackPanel Margin ="2" Background="{StaticResource VioletColor}">
                                                        <TextBlock x:Name="accNameTB" Style="{StaticResource greenTextBlockStyle}" Text="Jonathan Davies"/>
                                                        <TextBlock x:Name="accDetailsTB" Style="{StaticResource greenTextBlockStyle}" Text="Acc.: 321452 | Sort:60-31-31"/>
                                                    </StackPanel>
                                                </Viewbox>
                                                <StackPanel >
                                                    <TextBlock Style="{StaticResource violetTextBlockStyle}" Text="Balance:" />
                                                    <TextBlock x:Name="accBalanceTB" Style="{StaticResource violetTextBlockStyle}" Text="£15, 550.40" />
                                                </StackPanel>
                                            </StackPanel>
                                        </Viewbox>
                                    </Border>
                                </Grid>
                            </DockPanel>
                        </Button>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
        **********************************************************************************
                                        CALENDARS
        **********************************************************************************      
        -->
        <!--Date Picker Style-->
        <Style x:Key="DateSelector" TargetType="{x:Type DatePicker}">
            <!--<Setter Property="Height" Value="30"/>-->
            <!--<Setter Property="Padding" Value="50"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>-->
        </Style>


        <!--Calendar Style-->
        <Style x:Key="CalendarStyle" TargetType="{x:Type Calendar}">

            <Setter Property="Background" Value="{StaticResource VioletColor}"/>

            <Setter Property="Foreground" Value="{StaticResource YellowColor}"/>

            <Setter Property="Margin" Value="5"/>
        </Style>


        <Style x:Key="CustomCalendarItemStyle" TargetType="{x:Type CalendarItem}">
            <Setter Property="Margin" Value="0,3,0,3"/>
            <!--<Setter Property="Height" Value="300"/>
            <Setter Property="Width" Value="300"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>-->

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CalendarItem}">
                        <ControlTemplate.Resources>
                            <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                                <TextBlock Foreground="{StaticResource GreenColor}" FontWeight="Bold" FontSize="9.5" FontFamily="Verdana" HorizontalAlignment="Center" Margin="0,6,0,6" Text="{Binding}" VerticalAlignment="Center"/>
                            </DataTemplate>
                        </ControlTemplate.Resources>
                        <Viewbox Width="400" Height="400">
                            <Grid x:Name="PART_Root">
                                <Grid.Resources>
                                    <SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF"/>
                                </Grid.Resources>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal"/>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1">
                                    <Border BorderBrush="{StaticResource VioletColor}" BorderThickness="2" CornerRadius="1">
                                        <Grid>
                                            <Grid.Resources>
                                                <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
                                                    <Grid Cursor="Hand">
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup x:Name="CommonStates">
                                                                <VisualState x:Name="Normal"/>
                                                                <VisualState x:Name="MouseOver">
                                                                    <Storyboard>
                                                                        <ColorAnimation Duration="0" To="#FF73A9D8" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Disabled">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>
                                                        <Rectangle Fill="Transparent" Opacity="1" Stretch="Fill"/>
                                                        <Grid>
                                                            <Path x:Name="path" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z" Fill="{StaticResource YellowColor}" HorizontalAlignment="Left" Height="10" Margin="14,-6,0,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                                        </Grid>
                                                    </Grid>
                                                </ControlTemplate>
                                                <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
                                                    <Grid Cursor="Hand">
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup x:Name="CommonStates">
                                                                <VisualState x:Name="Normal"/>
                                                                <VisualState x:Name="MouseOver">
                                                                    <Storyboard>
                                                                        <ColorAnimation Duration="0" To="#FF73A9D8" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Disabled">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>
                                                        <Rectangle Fill="Transparent" Opacity="1" Stretch="Fill"/>
                                                        <Grid>
                                                            <Path x:Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z" Fill="{StaticResource YellowColor}" HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                                        </Grid>
                                                    </Grid>
                                                </ControlTemplate>
                                                <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
                                                    <Grid Cursor="Hand">
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup x:Name="CommonStates">
                                                                <VisualState x:Name="Normal"/>
                                                                <VisualState x:Name="MouseOver">
                                                                    <Storyboard>
                                                                        <ColorAnimation Duration="0" To="#FF73A9D8" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="buttonContent"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Disabled">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>
                                                        <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="{DynamicResource YellowColor}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,4,1,9" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Grid.Resources>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>
                                            <Button x:Name="PART_PreviousButton" Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" Grid.Row="0" Template="{StaticResource PreviousButtonTemplate}" Width="28"/>
                                            <Button x:Name="PART_HeaderButton" Grid.Column="1" FontWeight="Bold" Focusable="False" FontSize="10.5" HorizontalAlignment="Center" Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}" VerticalAlignment="Center"/>
                                            <Button x:Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" Grid.Row="0" Template="{StaticResource NextButtonTemplate}" Width="28"/>
                                            <Grid x:Name="PART_MonthView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-1,6,6" Grid.Row="1" Visibility="Visible">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                            </Grid>
                                            <Grid x:Name="PART_YearView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-3,7,6" Grid.Row="1" Visibility="Hidden">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                            </Grid>
                                        </Grid>
                                    </Border>
                                </Border>
                                <Rectangle x:Name="PART_DisabledVisual" Fill="{StaticResource DisabledColor}" Opacity="0" RadiusY="2" RadiusX="2" Stretch="Fill" Stroke="{StaticResource DisabledColor}" StrokeThickness="1" Visibility="Collapsed"/>
                            </Grid>

                        </Viewbox>


                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                                <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                                <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                                <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                                <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--CALENDAR BUTTON STYLE-->

        <Style x:Key="CustomCalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
            <Setter Property="MinWidth" Value="5"/>
            <Setter Property="MinHeight" Value="5"/>
            <Setter Property="FontSize" Value="10"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.1"/>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HighlightBackground"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HighlightBackground"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HighlightBackground"/>
                                            <DoubleAnimation Duration="0" To=".35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0"/>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Unselected"/>
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To=".75" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBackground"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CalendarButtonFocusStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0"/>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="CalendarButtonFocused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="DayButtonFocusVisual">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="CalendarButtonUnfocused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="DayButtonFocusVisual">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Collapsed</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="ActiveStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0"/>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Active"/>
                                    <VisualState x:Name="Inactive">
                                        <Storyboard>
                                            <ColorAnimation Duration="0" To="#FF777777" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="DayStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0"/>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="RegularDay"/>
                                    <VisualState x:Name="Today">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="TodayBackground"/>
                                            <ColorAnimation Duration="0" To="#FFFFFFFF" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="BlackoutDayStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0"/>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="NormalDay"/>
                                    <VisualState x:Name="BlackoutDay">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To=".2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Blackout"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="TodayBackground" Fill="#FFAAAAAA" Opacity="0" RadiusY="1" RadiusX="1"/>
                            <Rectangle x:Name="SelectedBackground" Fill="#FFBADDE9" Opacity="0" RadiusY="1" RadiusX="1"/>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                            <Rectangle x:Name="HighlightBackground" Fill="#FFBADDE9" Opacity="0" RadiusY="1" RadiusX="1"/>
                            <ContentPresenter x:Name="NormalText" TextElement.Foreground="{StaticResource YellowColor}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,1,5,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Path x:Name="Blackout" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z" Fill="#FF000000" HorizontalAlignment="Stretch" Margin="3" Opacity="0" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Stretch"/>
                            <Rectangle x:Name="DayButtonFocusVisual" IsHitTestVisible="false" RadiusY="1" RadiusX="1" Stroke="#FF45D6FA" Visibility="Collapsed"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="calendarButtonFormCustomStyle" TargetType="CalendarButton">
            <Setter Property="Height" Value="50"/>

        </Style>

        <!--
        **********************************************************************************
                                        DATEPICKER
        **********************************************************************************      
        -->
        
        <Style x:Key="formCalendarStyle" TargetType="{x:Type Calendar}">
            
            <Setter Property="Background" Value="{StaticResource VioletColor}"/>
            <Setter Property="CalendarDayButtonStyle" Value="{DynamicResource CustomCalendarDayButtonStyle}"/>
            <Setter Property="CalendarItemStyle" Value="{DynamicResource CustomCalendarItemStyle}"/>
           
        </Style>
        
        

        <Style x:Key="formDatePicker" TargetType="{x:Type DatePicker}">
            <!--<Setter Property="Height" Value="100"/>-->
            <Setter Property="Margin" Value="0,10,0,0"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="FontSize" Value="30"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
            <Setter Property="Padding" Value="150,0,150,0"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Background" Value="{StaticResource WhiteColor}"/>
            <Setter Property="CalendarStyle" Value="{StaticResource formCalendarStyle}"/>


            <Style.Resources>
                <Style TargetType="DatePickerTextBox">
                    <Setter Property="IsReadOnly" Value="True"/>
                </Style>
            </Style.Resources>


        </Style>


        <!--
        **********************************************************************************
                                        DATA GRID ELEMENTS
        **********************************************************************************      
        -->
        <!--HEADER STYLE-->
        <Style x:Key="headerStyle" TargetType="{x:Type DataGridColumnHeader}">

            <Setter Property="Background" Value="{StaticResource GreenColor}"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
            <Setter Property="FontSize" Value="25"/>
            <Setter Property="FontFamily" Value="Times New Roman"/>
            <Setter Property="BorderBrush" Value="{StaticResource VioletColor}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="40"/>

        </Style>

        <!--ROW STYLE-->
        <Style x:Key="rowStyle" TargetType="{x:Type DataGridRow}">
            <Setter Property="Tag" Value="ChangedBackground"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{StaticResource YellowColor}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource HoverOverColor}"/>
                </Trigger>
            </Style.Triggers>

        </Style>

        <!--CELL STYLE-->
        <Style x:Key="cellStyle" TargetType="{x:Type DataGridCell}">

            <Setter Property="Background" Value="{StaticResource WhiteColor}"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
            <Setter Property="BorderBrush" Value="{StaticResource GreenColor}"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Height" Value="35"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="20"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter VerticalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="ChangedBackground">
                    <Setter Property="Background" Value="Transparent" />
                </DataTrigger>
            </Style.Triggers>
            <!--<Setter Property="Width" Value="10"/>-->

        </Style>


        <!--DATAGRID overall style-->
        <Style x:Key="dataGridStyle" TargetType="{x:Type DataGrid}">

            <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource GreenColor}"/>
            <Setter Property="VerticalGridLinesBrush" Value="{StaticResource GreenColor}"/>
            <Setter Property="ColumnHeaderStyle" Value="{StaticResource headerStyle}"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
            <Setter Property="Background" Value="{StaticResource VioletColor}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="CellStyle" Value="{StaticResource cellStyle}"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="RowHeaderWidth" Value="0"/>
            <Setter Property="CanUserAddRows" Value="False"/>
            <Setter Property="AutoGenerateColumns" Value="False"/>
            <Setter Property="IsSynchronizedWithCurrentItem" Value="False"/>
            <Setter Property="SelectionUnit" Value="FullRow"/>
            <Setter Property="RowStyle" Value="{StaticResource rowStyle}"/>
            <Setter Property="SelectionMode" Value="Single"/>

        </Style>



        <Style x:Key="cellPredictionTemplateStyle" TargetType="DataGridCell">

            <Setter Property="Background" Value="{StaticResource VioletColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WhiteColor}"/>
            <Setter Property="BorderBrush" Value="{StaticResource GreenColor}"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="9"/>

        </Style>
        <!--HEADER STYLE-->
        <Style x:Key="headerVioletStyle" TargetType="{x:Type DataGridColumnHeader}">

            <Setter Property="Background" Value="{StaticResource VioletColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WhiteColor}"/>
            <Setter Property="FontSize" Value="11"/>
            <Setter Property="FontFamily" Value="Times New Roman"/>
            <Setter Property="BorderBrush" Value="{StaticResource VioletColor}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="20"/>

        </Style>

        <Style x:Key="rowHeaderStyle" TargetType="DataGridRowHeader">
            <Setter Property="Background" Value="{StaticResource GreenColor}"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>

        </Style>

        <Style x:Key="dataGridPredictionTemplateStyle" TargetType="DataGrid">

            <Setter Property="RowHeaderStyle" Value="{StaticResource rowHeaderStyle}" />
            <Setter Property="CellStyle" Value="{StaticResource cellPredictionTemplateStyle}"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="CanUserAddRows" Value="False"/>
            <Setter Property="AutoGenerateColumns" Value="False"/>
            <Setter Property="Background" Value="{StaticResource VioletColor}"/>
            <Setter Property="ColumnHeaderStyle" Value="{StaticResource headerStyle}"/>
            <Setter Property="BorderThickness" Value="0"/>

        </Style>


        <!--*****************************************************************************-->
       
        <!--
        **********************************************************************************************   
                                           Viewbox Style        
        **********************************************************************************************
        -->


        <Style x:Key="vBoxStyle" TargetType="Viewbox">
            <Setter Property="Height" Value="50"/>
            <Setter Property="Stretch" Value="Fill"/>
        </Style>


        <!--
        **********************************************************************************
                                        SCROLL VIEW ELEMENTS
        **********************************************************************************      
        -->

        <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid x:Name="Grid">
                            <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" 
                                           Height="Auto" Fill="Transparent"/>
                            <Border x:Name="Rectangle1" CornerRadius="0 10 10 0" HorizontalAlignment="Stretch" 
                                        VerticalAlignment="Stretch" Width="Auto" Height="Auto" 
                                        Background="{TemplateBinding Background}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Tag" Value="Horizontal">
                                <Setter TargetName="Rectangle1" Property="Width" Value="Auto"/>
                                <Setter TargetName="Rectangle1" Property="Height" Value="7"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--SCROLLBARS-->
        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Foreground" Value="{StaticResource GreenColor}"/>
            <Setter Property="Background" Value="DarkGray"/>
            <Setter Property="Width" Value="7"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot" Width="12" Background="{x:Null}">
                            <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="False">
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" 
                                               Style="{DynamicResource ScrollThumbs}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="False"/>
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="False"/>
                                </Track.DecreaseRepeatButton>
                            </Track>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                <Setter Value="{DynamicResource ButtonSelectBrush}" 
                                            TargetName="Thumb" Property="Background"/>
                            </Trigger>
                            <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background"/>
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="Orientation" Value="Horizontal">
                                <Setter TargetName="GridRoot" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="PART_Track" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Width" Value="Auto"/>
                                <Setter Property="Height" Value="12"/>
                                <Setter TargetName="Thumb" Property="Tag" Value="Horizontal"/>
                                <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand"/>
                                <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--*****************************************************************************-->


        <!--
        **********************************************************************************
                                        FORM TEXT BOX STYLE
        **********************************************************************************      
        -->

        <!--FORM TEXTBOX STYLE-->
        <Style x:Key="formTextBoxStyle" TargetType="{x:Type TextBox}">
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
            <Setter Property="FontFamily" Value="Times New Roman"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="FontSize" Value="30"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="0,10,0,0"/>
            <Setter Property="Padding" Value="150,0,150,0"/>
            
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}"/>
                    <Setter Property="BorderBrush" Value="OrangeRed"/>
                </Trigger>

            </Style.Triggers>

        </Style>

        <!--
        **********************************************************************************
                                        TOOLTIP ERROR STYLE
        **********************************************************************************      
        -->

        <Style x:Key="toolTipStyle" TargetType="ToolTip">

            <!--<Setter Property="Width" Value="150"/>
            <Setter Property="Height" Value="150"/>-->
            <Setter Property="Background" Value="OrangeRed"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
            <Setter Property="FontSize" Value="25"/>
            <Setter Property="FontFamily" Value="Times New Roman"/>


        </Style>

        <!--
        **********************************************************************************
                                        COMBO BOX STYLE
        **********************************************************************************      
        -->

        <Style x:Key="formComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="Margin" Value="0,10,0,0"/>
            <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="FontSize" Value="30"/>
            <Setter Property="Width" Value="auto"/>
            <Setter Property="MaxDropDownHeight" Value="200"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="150,0,150,0"/>
            <Setter Property="IsEditable" Value="True"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="Text" Value="Select"/>
            <Setter Property="BorderThickness" Value="0"/>
            <!--<Setter Property="IsEditable" Value="False"/>-->
            <Setter Property="ToolTip" Value="Select the box to to choose"/>

            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="True">
                    <Setter Property="Foreground" Value="{DynamicResource VioletColor}"/>
                    <Setter Property="Background" Value="White"/>
                </Trigger>
                <Trigger Property="IsReadOnly" Value="True">
                    <Setter Property="Foreground" Value="{DynamicResource VioletColor}"/>
                    <Setter Property="Background" Value="White"/>
                </Trigger>


            </Style.Triggers>

        </Style>


        <!--COMBO BOX TEMPLATE STYLE FOR CUSTOM TRANSACTIONS SELECTOR-->

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle StrokeDashArray="1 2" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" Margin="2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#6221A3" Offset="0.0"/>
            <GradientStop Color="#6221A3" Offset="1.0"/>
        </LinearGradientBrush>
        <!--E0FF8A-->
        <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#4FE8A1"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#6221A3"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#4FE8A1"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#4FE8A1"/>
        <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#6221A3" Offset="0.0"/>
            <GradientStop Color="#6221A3" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#4FE8A1"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#6221A3"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#6221A3"/>
        <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#6221A3" Offset="0.0"/>
            <GradientStop Color="#6221A3" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#6221A3"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#6221A3"/>
        <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#6221A3" Offset="0.0"/>
            <GradientStop Color="#6221A3" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#4FE8A1"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#6221A3"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#4FE8A1"/>
        <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#6221A3" Offset="0.0"/>
            <GradientStop Color="#6221A3" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#6221A3"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#6221A3"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#6221A3"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#6221A3"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}">
                            <Border x:Name="splitBorder" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
                                <Path x:Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Fill="{StaticResource ComboBox.Static.Glyph}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
        <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="MinWidth" Value="0"/>
            <Setter Property="MinHeight" Value="0"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
                    <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Border>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="true">
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>


        <Style x:Key="CustomItemContainerStyle" TargetType="ComboBoxItem">
            <Setter Property="Background" Value="{StaticResource VioletColor}"/>
            <Setter Property="BorderBrush" Value="{StaticResource VioletColor}"/>
            <Style.Triggers>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Background" Value="{StaticResource VioletColor}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource VioletColor}"/>
                    <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
                </Trigger>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource VioletColor}"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property= "Background" Value="{StaticResource GreenColor}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource GreenColor}"/>
                    <Setter Property="Foreground" Value="{StaticResource VioletColor}"/>
                </Trigger>


            </Style.Triggers>
        </Style>

        <Style x:Key="CustomComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Padding" Value="6,3,5,3"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            <Setter Property="ItemContainerStyle" Value="{StaticResource CustomItemContainerStyle}"/>

            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="2"/>
                    <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                </Trigger>
            </Style.Triggers>


        </Style>

    </Application.Resources>
</Application>
